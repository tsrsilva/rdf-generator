# SPDX-FileCopyrightText: 2025 Thiago S. R. Silva, Diego S. Porto
# SPDX-License-Identifier: MIT

name: CI/CD Pipeline

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-build-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository with token (needed for tagging)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Set up Conda environment
      - name: Set up Conda
        run: |
          # Install Miniconda
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"

          # Update conda
          conda update -y conda

          # Create environment from environment.yml
          conda env create -f environment.yml -n tool2_env

          # Debug: list environments
          conda info --envs

      # 3. Install your package in editable mode
      - name: Install package
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          conda run -p $HOME/miniconda/envs/tool2_env pip install -e .

      # 4. Run tests
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          conda run -p $HOME/miniconda/envs/tool2_env pytest tests/ --maxfail=1 --disable-warnings -v

      # 5. Determine next semantic version
      - name: Get next semantic version
        id: semver
        run: |
          VERSION=$(conda run -p $HOME/miniconda/envs/tool2_env python -m semantic_release version --print)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 6. Tag Git commit with new version
      - name: Tag commit
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse "v${{ steps.semver.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.semver.outputs.version }} already exists, skipping."
          else
            git tag -a "v${{ steps.semver.outputs.version }}" -m "Release ${{ steps.semver.outputs.version }}"
            git push "https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" --tags
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # 7. Build Docker image
      - name: Build Docker image
        run: |
          VERSION=${{ steps.semver.outputs.version }}
          docker build -t rdf-generator:latest -t rdf-generator:$VERSION .

      # 8. Validate Docker Compose setup
      - name: Validate Docker Compose build
        run: |
          docker compose -f docker-compose.yml config
          docker compose -f docker-compose.yml build

      # Debug: Check secret visibility (safe)
      - name: Debug secret visibility (safe)
        run: |
          echo "Checking if Docker secrets are visible..."
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "DOCKER_USERNAME is NOT visible"
          else
            echo "DOCKER_USERNAME is visible"
          fi

          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "DOCKER_PASSWORD is NOT visible"
          else
            echo "DOCKER_PASSWORD is visible"
          fi

      # 9. Run container smoke test
      - name: Run container smoke test
        run: |
          docker compose -f docker-compose.yml run --rm rdf-generator --help

      # 10. Push Docker image (requires secrets: DOCKER_USERNAME, DOCKER_PASSWORD)
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ steps.semver.outputs.version }}
        run: |
          # Check that Docker credentials are available
          if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "ERROR: Docker credentials not found in GitHub Secrets."
            echo "Please add DOCKER_USERNAME and DOCKER_PASSWORD to your repository secrets."
            echo "Skipping Docker push."
            exit 1
          fi

          echo "Logging in to Docker Hub as $DOCKER_USERNAME..."
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          echo "Tagging and pushing Docker images (version: $VERSION)..."
          docker tag rdf-generator:$VERSION $DOCKER_USERNAME/rdf-generator:$VERSION
          docker tag rdf-generator:$VERSION $DOCKER_USERNAME/rdf-generator:latest

          docker push $DOCKER_USERNAME/rdf-generator:$VERSION
          docker push $DOCKER_USERNAME/rdf-generator:latest

          echo "Docker images pushed successfully!"


