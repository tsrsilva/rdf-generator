# SPDX-FileCopyrightText: 2025 Thiago S. R. Silva, Diego S. Porto
# SPDX-License-Identifier: MIT

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-build-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # needed for tagging

      # 2. Set up Conda environment
      - name: Set up Conda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"
          conda update -y conda
          conda env create -f environment.yml -n tool2_env
          conda info --envs

      # 3. Install Python package
      - name: Install Python package
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          conda run -p $HOME/miniconda/envs/tool2_env pip install -e .

      # 4. Run tests
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          conda run -p $HOME/miniconda/envs/tool2_env pytest tests/ --maxfail=1 --disable-warnings -v

      # 5. Determine next semantic version
      - name: Get next semantic version
        id: semver
        shell: bash -l {0}
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          conda activate tool2_env
          VERSION=$(python -m semantic_release version --print)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 6. Tag Git commit with new version (authenticated)
      - name: Tag commit
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.semver.outputs.version }}" -m "Release ${{ steps.semver.outputs.version }}"
          git push "https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. Build Docker image
      - name: Build Docker image
        run: |
          VERSION=${{ steps.semver.outputs.version }}
          docker build -t rdf-generator:latest -t rdf-generator:$VERSION .

      # 8. Validate Docker Compose setup
      - name: Validate Docker Compose build
        run: |
          docker compose -f docker-compose.yml config
          docker compose -f docker-compose.yml build

      # 9. Run container smoke test
      - name: Run container smoke test
        run: |
          docker compose -f docker-compose.yml run --rm rdf-generator --help

      # 10. Push Docker image (requires secrets: DOCKER_USERNAME, DOCKER_PASSWORD)
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          VERSION=${{ steps.semver.outputs.version }}
          docker tag rdf-generator:$VERSION ${{ secrets.DOCKER_USERNAME }}/rdf-generator:$VERSION
          docker tag rdf-generator:$VERSION ${{ secrets.DOCKER_USERNAME }}/rdf-generator:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/rdf-generator:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/rdf-generator:latest
